generate 20 mutants
in "data/out/"
from "data/model/"
metamodel "/MiniJavaMutation/data/model/XMiniJava.ecore"

with blocks {
	cs "Changes the symbol of symbol ref with another symbol of the same type"{
		symbol1 = select one Symbol
		symbol2 = select one Symbol where {self <> symbol1 and typeRef = symbol1->typeRef}
		modify one SymbolRef where {symbol = symbol1} with {symbol = symbol2}
	}
	apr "Argument propagation for return statement" {
		stmt = select one Return where {expression is typed MethodCall}
		methodCall = select one MethodCall in stmt->expression
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify stmt with {expression = param}
	}
	apar "Argument propagation And Expression rightOperand" {
		exp0 = select one And where {right is typed MethodCall}
		methodCall = select one MethodCall in exp0->right
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {right = param}
	}
	apal "Argument propagation And Expression leftOperand" {
		exp0 = select one And where {left is typed MethodCall}
		methodCall = select one MethodCall in exp0->left
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {left = param}
	}
	apor "Argument propagation Or Expression rightOperand" {
		exp0 = select one Or where {right is typed MethodCall}
		methodCall = select one MethodCall in exp0->right
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {right = param}
	}
	apol "Argument propagation Or Expression leftOperand" {
		exp0 = select one Or where {left is typed MethodCall}
		methodCall = select one MethodCall in exp0->left
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {left = param}
	}
	aper "Argument propagation Equality Expression rightOperand" {
		exp0 = select one Equality where {right is typed MethodCall}
		methodCall = select one MethodCall in exp0->right
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {right = param}
	}
	apel "Argument propagation Equality Expression leftOperand" {
		exp0 = select one Equality where {left is typed MethodCall}
		methodCall = select one MethodCall in exp0->left
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {left = param}
	}
	apixr "Argument propagation Inequality Expression rightOperand" {
		exp0 = select one Inequality where {right is typed MethodCall}
		methodCall = select one MethodCall in exp0->right
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {right = param}
	}
	apixl "Argument propagation Inequality Expression leftOperand" {
		exp0 = select one Inequality where {left is typed MethodCall}
		methodCall = select one MethodCall in exp0->left
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {left = param}
	}
	apser "Argument propagation SuperiorOrEqual Expression rightOperand" {
		exp0 = select one SuperiorOrEqual where {right is typed MethodCall}
		methodCall = select one MethodCall in exp0->right
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {right = param}
	}
	apsel "Argument propagation SuperiorOrEqual Expression leftOperand" {
		exp0 = select one SuperiorOrEqual where {left is typed MethodCall}
		methodCall = select one MethodCall in exp0->left
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {left = param}
	}
	apier "Argument propagation InferiorOrEqual Expression rightOperand" {
		exp0 = select one InferiorOrEqual where {right is typed MethodCall}
		methodCall = select one MethodCall in exp0->right
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {right = param}
	}
	apiel "Argument propagation InferiorOrEqual Expression leftOperand" {
		exp0 = select one InferiorOrEqual where {left is typed MethodCall}
		methodCall = select one MethodCall in exp0->left
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {left = param}
	}
	apsr "Argument propagation Superior Expression rightOperand" {
		exp0 = select one Superior where {right is typed MethodCall}
		methodCall = select one MethodCall in exp0->right
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {right = param}
	}
	apsl "Argument propagation SuperiorExpression leftOperand" {
		exp0 = select one Superior where {left is typed MethodCall}
		methodCall = select one MethodCall in exp0->left
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {left = param}
	}
	apir "Argument propagation Inferior Expression rightOperand" {
		exp0 = select one Inferior where {right is typed MethodCall}
		methodCall = select one MethodCall in exp0->right
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {right = param}
	}
	apil "Argument propagation Inferior Expression leftOperand" {
		exp0 = select one Inferior where {left is typed MethodCall}
		methodCall = select one MethodCall in exp0->left
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {left = param}
	}
	appr "Argument propagation Plus Expression rightOperand" {
		exp0 = select one Plus where {right is typed MethodCall}
		methodCall = select one MethodCall in exp0->right
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {right = param}
	}
	appl "Argument propagation Plus Expression leftOperand" {
		exp0 = select one Plus where {left is typed MethodCall}
		methodCall = select one MethodCall in exp0->left
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {left = param}
	}
	apmr "Argument propagation Minus Expression rightOperand" {
		exp0 = select one Minus where {right is typed MethodCall}
		methodCall = select one MethodCall in exp0->right
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {right = param}
	}
	apml "Argument propagation Minus Expression leftOperand" {
		exp0 = select one Minus where {left is typed MethodCall}
		methodCall = select one MethodCall in exp0->left
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {left = param}
	}
	apmur "Argument propagation Multiplication Expression rightOperand" {
		exp0 = select one Multiplication where {right is typed MethodCall}
		methodCall = select one MethodCall in exp0->right
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef} 
		modify exp0 with {right = param}
	}
	apmul "Argument propagation Multiplication Expression leftOperand" {
		exp0 = select one Multiplication where {left is typed MethodCall}
		methodCall = select one MethodCall in exp0->left
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {left = param}
	}
	apdr "Argument propagation Division Expression rightOperand" {
		exp0 = select one Division where {right is typed MethodCall}
		methodCall = select one MethodCall in exp0->right
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {right = param}
	}
	apdl "Argument propagation Division Expression leftOperand" {
		exp0 = select one Division where {left is typed MethodCall}
		methodCall = select one MethodCall in exp0->left
		param = select one SymbolRef in methodCall->args where {symbol->typeRef = methodCall->method->typeRef}
		modify exp0 with {left = param}
	}
	cbct "Changes the value of boolean constant: true"{
		modify one BoolConstant where {value = 'false'} with {value = 'true'}
	}
	cbcf "Changes the value of boolean constant: false"{
		modify one BoolConstant where {value = 'true'} with {value = 'false'}
	}
	csc "Changes the value of string constant"{
		modify one StringConstant with {value = random-string(1, 4)}
	}
	cic "Changes the value of integer constant"{
		modify one IntConstant with {value = random-int}
	}
}