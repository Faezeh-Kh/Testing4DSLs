generate 20 mutants
in "data/out/"
from "data/model/"
metamodel "/PSSMMutation/data/model/statemachines.ecore"

with blocks {
	cis "Changes the initial state to a different one" {
		initial = select one Pseudostate
		transition = select one Transition where {^source is typed Pseudostate and ^source <> initial}
		modify transition with {^source = initial}
	}
	cfs "Changes the final state to a different one"{
		final = select one FinalState
		transition = select one Transition where {^target is typed FinalState and ^target<>final}
		modify transition with {^target = final}
	}
	cst "Changes the source state of a transition"{
		transition = select one Transition
		state = select one State where {self not typed FinalState and self <> transition->^source}
		modify transition with {^source = state}
	}
	cts "Changes the target state of a transition"{
		transition = select one Transition
		state = select one State where {self <> transition->^target}
		modify transition with {^target = state}
	}
	cat "Changes the action of a transition"{
		transition = select one Transition where {effect <> null}
		action = select one Behavior where {self <> transition->effect}
		modify transition with {effect = action} 
	}
	cet "Changes the event of a transition"{
		event = select one Trigger
		transition = select one Transition where {triggers <> event}
		modify transition with {triggers = event}
	}
	cio "Changes the operator of Integer comparison"{
		integerExpression = select one IntegerComparisonExpression
		
	}
//	cac "Creates an action and set it to a transition"{
//		action = create Behavior with {name = random-string(1, 4)}
//		modify one Transition with {effect = action}
//	}
//	cas "Creates an action and set it to a state"{
//		action = create Behavior with {name = random-string(1, 4)}
//		modify one State where {self not typed FinalState} with {entry = action}
//	}
//	ccfs "Creates a connected final state "{
//		randomState = select one Vertex where {self not typed FinalState}
//		fs = create FinalState with {name = random-string(1, 4)}
//		create Transition with {^source = randomState, ^target = fs, name = random-string(1, 4)}
//	}
//	ccs "Creates a connected state" {
//		randomState = select one Vertex where {self not typed FinalState}
//		newState = create State with {name = random-string(1, 4)}
//		create Transition with {^source = randomState, ^target = newState, kind = {external}, name = random-string(1, 4)}
//	}
//	ctr "Creates a transition with random source and target states"{
//		randomState1 = select one Vertex where {self not typed FinalState}
//		randomState2 = select one Vertex where {self not typed Pseudostate}
//		create Transition with {name = random-string(1, 4), ^source = randomState1, ^target = randomState2}
//	}
//	ctr2 "Creates a transition with source but without target state"{
//		randomState = select one Vertex where {self not typed FinalState}
//		create Transition with {name = random-string(1, 4), ^source = randomState}
//	}
//	cev "Creates an event and set it to a transition"{	
//		signalEventType = create SignalEventType with {signal = one Signal}
//		//signalEventType = create CallEventType with {operation = one Operation}
//		event = create Trigger with {name = random-string(1, 4), eventType = signalEventType}
//		modify one Transition with {triggers = event}
//	}
//	dtr "Duplicates a transition"{
//		deep clone one Transition
//	}
//	rac "Removes an action"{
//		remove one Behavior
//	}
//	rco "Removes a constraint"{
//		remove one Constraint
//	}
//	rev "Removes an event"{
//		remove one Trigger
//	}
//	rst "Removes a state and adjacent transitions"{
//		remove one Vertex
//		remove all Transition where {^source = null}
//		remove all Transition where {^target = null}
//	}
//	rtr "Removes a transition"{
//		remove one Transition
//	}
//	sdt "Swaps the direction of a transition"{
//		modify one Transition with {swapref(^source, ^target)}
//	}
}