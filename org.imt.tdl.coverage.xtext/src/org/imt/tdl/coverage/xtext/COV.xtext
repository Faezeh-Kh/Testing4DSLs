// automatically generated by Xtext
grammar org.imt.tdl.coverage.xtext.COV with org.eclipse.xtext.common.Terminals

import "https://org.imt.tdl.coverage/DSLSpecificCoverage" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DomainSpecificCoverage returns DomainSpecificCoverage:
	'DomainSpecificCoverage'
	name=EString
	'{'
		'Import' 'metamodel' metamodel=[ecore::EPackage|EString]
		contexts+=Context ( "," contexts+=Context)* 
	'}';

EString returns ecore::EString:
	STRING | ID;

Context returns Context:
	'Context' metaclass=[ecore::EClass|EString]
	'{'
		('rules' '{' rules+=Rule ( "," rules+=Rule)* '}' )?
	'}';

Rule returns Rule:
	Ignore | CoverageByReference | CoverageByContainment | IgnoreIfContained;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Ignore returns Ignore:
	{Ignore}
	'Ignore'
	'{'
		('ignoreIfSubtyped' ignoreIfSubtyped=EBoolean)?
	'}';

CoverageByReference returns CoverageByReference:
	'CoverageByReference'
	'{'
		'reference' reference=[ecore::EReference|EString]
	'}';

CoverageByContainment returns CoverageByContainment:
	'CoverageByContainment'
	'{'
		'containmentReference' containmentReference=[ecore::EReference|EString]
		'multiplicity' multiplicity=CoveredContainee
	'}';

IgnoreIfContained returns IgnoreIfContained:
	'IgnoreIfContained'
	'{'
		'condition' condition=ConditionType
		'containerType' '(' containerType+=[ecore::EClass|EString] ( "," containerType+=[ecore::EClass|EString])* ')' 
	'}';

enum CoveredContainee returns CoveredContainee:
				ALL = 'ALL' | ONE = 'ONE';

enum ConditionType returns ConditionType:
				INCLUSION = 'INCLUSION' | EXCLUSION = 'EXCLUSION';
