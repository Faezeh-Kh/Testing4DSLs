Package reactiveATM_testSuite {
	Import all from common ;
	Import all from xPSSMTypes;
	Import all from xPSSMEvents;
	Import all from testConfiguration ;
	
	StateMachine ATM (_name = "withdrawCash");
	State getPinState (_name = "getPin");
	FinalState finalState (_name = "FinalState"); 
	
	Signal Card (_name = "Card", attributes = {cardPin, cardBalance});
	IntegerAttribute cardPin (_name="cardPin");
	IntegerAttribute cardBalance (_name="cardBalance");
	
	Signal Pin (_name = "Pin", attributes = {enteredPin});
	IntegerAttribute enteredPin (_name = "enteredPin");
	
	Signal Amount (_name = "Amount", attributes = {enteredAmount});
	IntegerAttribute enteredAmount (_name = "withdrawAmount");
	
	SignalEventOccurrence signal_occurrence();
	IntegerAttributeValue cardPinValue (_attribute = cardPin);
	IntegerAttributeValue cardBalanceValue (_attribute = cardBalance);
	IntegerAttributeValue enteredPinValue (_attribute = enteredPin);
	IntegerAttributeValue enteredAmountValue (_attribute = enteredAmount);
	
	Behavior insertCardMsg (_name = "insertCardMsg");
	Behavior enterPinMsg (_name = "enterPinMsg");
	Behavior wrongPinMsg (_name = "wrongPinMsg");
	Behavior enterAmountMsg (_name = "enterAmountMsg");
	Behavior updateCardBalance (_name = "updateCardBalance");
	Behavior notEnoughMoneyMsg (_name = "notEnoughMoneyMsg");
	Behavior deliverCash (_name = "deliverCash");
	
	Test Description test__wrongPin uses configuration WithdrawCashConfiguration{
		tester.reactiveGate sends _run (state_machine = ATM) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = insertCardMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Card,
				attributeValues = {cardPinValue (_value = "1234"), cardBalanceValue (_value = "1000")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = enterPinMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Pin,
				attributeValues = {enteredPinValue (_value = "1111")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = wrongPinMsg) to tester.reactiveGate;
	}
	
	Test Description test_successfulWithdraw uses configuration WithdrawCashConfiguration{
		tester.reactiveGate sends _run (state_machine = ATM) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = insertCardMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Card,
				attributeValues = {cardPinValue (_value = "1234"), cardBalanceValue (_value = "1000")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = enterPinMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Pin,
				attributeValues = {enteredPinValue (_value = "1234")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = enterAmountMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Amount,
				attributeValues = {enteredAmountValue (_value = "500")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = updateCardBalance) to tester.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = deliverCash) to tester.reactiveGate;
	}
	
	Test Description test3_wrongAmount uses configuration WithdrawCashConfiguration{
		tester.reactiveGate sends _run (state_machine = ATM) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = insertCardMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Card,
				attributeValues = {cardPinValue (_value = "1234"), cardBalanceValue (_value = "1000")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = enterPinMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Pin,
				attributeValues = {enteredPinValue (_value = "1234")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = enterAmountMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Amount,
				attributeValues = {enteredAmountValue (_value = "1500")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = notEnoughMoneyMsg) to tester.reactiveGate;
	}
	
	Test Description test4_ocl uses configuration WithdrawCashConfiguration{
		tester.reactiveGate sends _run (state_machine = ATM) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = insertCardMsg) to tester.reactiveGate;
		tester.reactiveGate sends signal_received (
			state_machine = ATM, 
			signal_occurrence = signal_occurrence (
				signal = Card,
				attributeValues = {cardPinValue (_value = "1234"), cardBalanceValue (_value = "1000")})
		) to statemachine.reactiveGate;
		statemachine.reactiveGate sends behavior_executed (behavior = enterPinMsg) to tester.reactiveGate;
		tester.oclGate sends oclQuery (context = ATM, query = "self.regions->first().currentVertex") to statemachine.oclGate;
		statemachine.oclGate sends getPinState to tester.oclGate;
	}
}