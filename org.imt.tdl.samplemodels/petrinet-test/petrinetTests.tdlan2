Package petrinet{
	Import all from commonPackage;
	Import all from PetrinetSpecificPackage;
	
	
	//test data definition
	Place givenP1 (pName = "p1", initialTokens = "1", tokens = "1");
	Place givenP2 (pName = "p2", initialTokens = "0", tokens = "0");
	Place givenP3 (pName = "p3", initialTokens = "1", tokens = "1");
	Place givenP4 (pName = "p4", initialTokens = "0", tokens = "0");
	Place givenP5 (pName = "p5", initialTokens = "0", tokens = "0");
	modelState givenState (places = {givenP1, givenP2, givenP3, givenP4, givenP5});
	
	//Expected model state
	Place expectedP1 (pName = "p1", initialTokens = "1", tokens = ?);
	Place expectedP2 (pName = "p2", initialTokens = "0", tokens = ?);
	Place expectedP3 (pName = "p3", initialTokens = "1", tokens = ?);
	Place expectedP4 (pName = "p4", initialTokens = "0", tokens = ?);
	Place expectedP5 (pName = "p5", initialTokens = "0", tokens = ?);
	modelState expectedState (places = {expectedP1, expectedP2, expectedP3, expectedP4, expectedP5});
	
	OCL oclquery (query = ?);  
	
	//instantiation of the types to be used in the test description
	fire fire_t1 (transition = ?);
	setState setModelState (state = ?);
	
	//Testing using generic commands
	Test Description petrinetGenericTest uses configuration genericConfiguration{
		tester.genericTestGate sends setModelState(state = givenState) to petrinet.genericMUTGate with {GIVEN:"";};
		tester.genericTestGate sends runMUT to petrinet.genericMUTGate with {WHEN:"";};
		tester.genericTestGate sends getModelState to petrinet.genericMUTGate with {WHEN:"";};
		alternatively{
			petrinet.genericMUTGate sends expectedState (places = 
															{expectedP1 (pName = "p1", initialTokens = "1", tokens = "0"), 
															expectedP2 (pName = "p2", initialTokens = "1", tokens = "0"), 
															expectedP3 (pName = "p3", initialTokens = "1", tokens = "0"), 
															expectedP4 (pName = "p4", initialTokens = "1", tokens = "0"), 
															expectedP5 (pName = "p5", initialTokens = "1", tokens = "1")
															})  to tester.genericTestGate;
			set verdict to PASS;
		} or{
			set verdict to FAIL;
		} with {THEN:"";}
	}
	//Testing using Petrinet-specific commands
	Test Description petrinetDslSpecificTest uses configuration dslSpecificConfiguration{
		tester.genericTestGate sends setModelState(state = givenState) to petrinet.genericMUTGate with {GIVEN;};
		tester.dslSpecificTestGate sends fire_t1 to petrinet.dslSpecificMUTGate with {WHEN;};
		tester.genericTestGate sends getModelState to petrinet.genericMUTGate with {WHEN;};
		alternatively{
			petrinet.dslSpecificMUTGate sends expectedState (places = 
															{expectedP1 (pName = "p1", initialTokens = "1", tokens = "0"), 
															expectedP2 (pName = "p2", initialTokens = "1", tokens = "1"), 
															expectedP3 (pName = "p3", initialTokens = "1", tokens = "2"), 
															expectedP4 (pName = "p4", initialTokens = "1", tokens = "0"), 
															expectedP5 (pName = "p5", initialTokens = "1", tokens = "0")
															})  to tester.dslSpecificTestGate;
			set verdict to PASS;
		} or{
			set verdict to FAIL;
		} with {THEN;}
	}
	//Testing using OCL commands
	Test Description petrinetTestUsingOCL uses configuration oclConfiguration{
		tester.genericTestGate sends setModelState(state = givenState) to petrinet.genericMUTGate with {GIVEN;};
		tester.genericTestGate sends runMUT to petrinet.genericMUTGate with {WHEN:"";};
		tester.oclTestGate sends oclquery (query = "petrinet.places -> select (p | p.tokens = '0')") 
								to petrinet.oclMUTGate with {WHEN;};
		alternatively{
			petrinet.oclMUTGate sends "p1, p2, p3, p4"  to tester.oclTestGate;
			set verdict to PASS;
		} or{
			set verdict to FAIL;
		} with {THEN;}
	}
}