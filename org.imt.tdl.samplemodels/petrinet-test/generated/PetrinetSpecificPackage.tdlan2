Package PetrinetSpecificPackage{
	Import all from commonPackage;
	//data type definition (driven from metamodel)
	//the types that are required for the definition of modelState
	Type Place(
		pName of type String,
		initialTokens of type Integer,
		tokens of type Integer
	);
	//definition of model state based on operational semantics-required for testing
	Type modelState(
		places of type Place
	);
	//events from operational semantics
	Type fire (
		transition of type String
	);
	
	//definition of new events required for testing
	Type setState(
		state of type modelState
	);
	
	//Test configuration
	Gate Type genericGate accepts runModel, setState, getState;//a gate for exchanging of generic types
	Gate Type dslSpecificGate accepts fire;//a gate for exchanging of dsl-specific types (based on DSL's behavioral interface)
	Gate Type oclGate accepts OCL;//a gate for querying the MUT using OCL 
	
	Component Type TestSystem having{
		gate genericTestGate of type genericGate;
		gate dslSpecificTestGate of type dslSpecificGate;
		gate oclTestGate of type oclGate;
	}
	Component Type MUT having{
		gate genericMUTGate of type genericGate;
		gate dslSpecificMUTGate of type dslSpecificGate;
		gate oclMUTGate of type oclGate;
	}
	Test Configuration genericConfiguration{
		create Tester tester of type TestSystem;
		create SUT petrinet of type MUT with {MUTPath : "model/petrinet.xmi";};
		connect tester.genericTestGate to petrinet.genericMUTGate;
	}
	Test Configuration dslSpecificConfiguration{
		create Tester tester of type TestSystem;
		create SUT petrinet of type MUT with {MUTPath : "model/petrinet.xmi";};
		connect tester.genericTestGate to petrinet.genericMUTGate;
		connect tester.dslSpecificTestGate to petrinet.dslSpecificMUTGate;
	}
	Test Configuration oclConfiguration{
		create Tester tester of type TestSystem;
		create SUT petrinet of type MUT with {MUTPath : "model/petrinet.xmi";};
		connect tester.genericTestGate to petrinet.genericMUTGate;
		connect tester.oclTestGate to petrinet.oclMUTGate;
	}
}