Package testElevator{
	
	Type String;
	Type Boolean;
	Type ElevatorState(
		CurrentFloor of type String,
		Doors_open of type Boolean,
		GoingUp of type Boolean,
		ElevatorButton0_pressed of type Boolean,
		ElevatorButton1_pressed of type Boolean,
		ElevatorButton2_pressed of type Boolean,
		UpButton0_pressed of type Boolean,
		UpButton1_pressed of type Boolean,
		DownButton1_pressed of type Boolean,
		DownButton2_pressed of type Boolean
	);
	Type Verdict;
	
	Gate Type elevatorState accepts ElevatorState;
	
	Component Type TestSystem having{
		gate testGate of type elevatorState;
	}
	Component Type SUT_Elevator having{
		gate sutGate of type elevatorState;
	}
	
	Test Configuration elevator_config{
		create Tester test_system of type TestSystem;
		create SUT elevator of type SUT_Elevator;
		connect test_system.testGate to elevator.sutGate;
	}
	
	ElevatorState givenState(
		CurrentFloor= '0',
		Doors_open= ?,
		GoingUp= ?,
		ElevatorButton0_pressed = 'false',
		ElevatorButton1_pressed = 'false',
		ElevatorButton2_pressed = 'false',
		UpButton0_pressed = 'true',
		UpButton1_pressed = 'false',
		DownButton1_pressed = 'false',
		DownButton2_pressed = 'false'
	);
	ElevatorState whenState(
		CurrentFloor= '0',
		Doors_open= 'false',
		GoingUp= ?,
		ElevatorButton0_pressed = 'false',
		ElevatorButton1_pressed = 'false',
		ElevatorButton2_pressed = 'true',
		UpButton0_pressed = 'true',
		UpButton1_pressed = 'false',
		DownButton1_pressed = 'false',
		DownButton2_pressed = 'false'
	);
	ElevatorState expectedState(
		CurrentFloor= '0',
		Doors_open= 'true',
		GoingUp= ?,
		ElevatorButton0_pressed = 'false',
		ElevatorButton1_pressed = 'false',
		ElevatorButton2_pressed = 'false',
		UpButton0_pressed = 'true',
		UpButton1_pressed = 'false',
		DownButton1_pressed = 'false',
		DownButton2_pressed = 'false'
	);
	Verdict PASS;
	Verdict FAIL;
	
	Test Description elevatorPriorityCheck uses configuration elevator_config{
		test_system.testGate sends givenState to elevator.sutGate;
		test_system.testGate sends whenState to elevator.sutGate;
		alternatively{
			elevator.sutGate sends expectedState to test_system.testGate;
			set verdict to PASS;
		} or {
			set verdict to FAIL;
		}
	}
}